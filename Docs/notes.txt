Configuración del Entorno de Desarrollo
1.- Se instalan las dependencias.
	$ sudo aptitude install node nodejs mongodb npm ruby ruby-dev
	Nota: Si el repo no posee el paquete de node mas actual, se debe descargar el source de la pagina oficial para instalarlo manualmente, para esto se deben tener instalados los paquetes necesarios:
		$ sudo apt-get install build-essential openssl libssl-dev pkg-config
		$ ./configure
		$ make
		$ make test
		$ make install

2.- Se instalan las dependencias desde el administrador de paquetes de node (npm):
	$ sudo npm install -g grunt-cli
	$ sudo npm install -g bower
	$ sudo npm install -g mongoose-unique-validator
	$ sudo npm install -g compass
	$ sudo npm install -g jshint

	Nota: El paquete compass (Necesario para el servidor grunt) puede ser instalado mediante el instalador de ruby, una vez actualizado:
		$ sudo gem install rubygems-update
		$ sudo update_rubygems
		$ sudo gem install compass

3.- Configuración del servidor (server):
	3.1.- Se crea la carpeta server dentro del proyecto.
		$ cd ~/workspace/meanapp  (Nota: El directorio es indiferente ya que node crea el servidor en localhost en un puerto determinado.)
		$ mkdir server
	3.2.- Se instalan los paquetes necesarios para la ejecución del servidor. Nota: se agregan segun la necesidad, existen muchos más.
		$ npm install --save express
		$ npm install --save mongoose
		$ npm install --save resourcejs
		$ npm install --save method-override
		$ npm install --save body-parser
		$ npm install --save lodash
		$ npm install --save node-restful

4.- Capa del Cliente:
	4.1- Instalación de yeoman:
	Una vez creada la carpeta cliente, se ingresa en ella y se ejecuta:
		$ npm install -g yo

	Nota: si muestran errores con el bloqueo de librerias para las dependencias.
		$ sudo chown -R $USER ~/.npm
		$ sudo chown -R $USER /usr/local/lib/node_modules
		$ mkdir clientAppFolder
		$ cd clientAppFolder
		$ npm install yo bower grunt-cli gulp generator-webapp generator-angular --save-dev
		$ yo angular


#########################################################################
######################Configuración del Repositorio######################
1.- Se instalan los siguientes paquetes:
	$ sudo aptitude install ssh git
2.- Se crea el directorio del proyecto y se inicializa con git:
	$ mkdir meanapp
	$ git init
	Nota: Para ver el estado se usa el comando 'git status'
3.- Se configura la llave de seguridad para la comunicación cifrada con el repositorio git:
	3.1- Para ver las llaves publicas del sistema se ejecuta 
		$ ls -al ~/.ssh
	3.2.- Se genera la nueva llave ejecutando:
		$ ssh-keygen -t rsa -b 4096 -C "epilef.rodriguez@gmail.com"
		Nota: Se recomienda dejar por defecto los parametros solicitados.
	3.3.- Se verifica que el agente este corriendo y se agrega la llave SSH al agente:
		$ eval "$(ssh-agent -s)"
		$ ssh-add ~/.ssh/id_rsa
	3.4.- Luego se agrega la llave del equipo a la cuenta en github, en settings - SSH Keys - Ass SSH Keys, para copiar la llave se ejecuta:
		$ cat /home/epilef/.ssh/id_rsa.pub
	3.5.- Finalmente podemos probar la conexión:
		$ ssh -T git@github.com
4.- Se Agrega el repositorio remoto de git y se clona para su trabajo en local:
	$ git remote (Para ver todos los repositorios remotos del sistema)
	$ git remote add origin git@github.com:Khanos/meanapp.git
	$ git clone -u origin master

#########################################################################
############################## Mapeo de BD ##############################

Configurar la base de datos:
	1.- Primero se agrega al index.js ubicado en '/models' el nombre del modelo y la ruta:
		
		nombredelmodelo: require('./RutaAlModelo').
		
		Nota: el 'nombredelmodelo' es el nombre del objeto que representa al modelo y por el que se transferira toda la información a la base de datos. La './RutaAlModelo' representa la ruta al archivo js ubicado por lo general dentro de la misma carpeta /models y representa el modelo fisico de la tabla en la base de datos.

	2.- Se agrega el modelo con el mapeo de los campos en la base de datos usando la herramienta para el modelado de datos 'mongoose', en el archivo NombreDelModelo.js dentro de la carpeta modelo del servidor y se agrega Ejemplo:

		var mongoose = require('mongoose');
		var uniqueValidator = require('mongoose-unique-validator');

		// Create the MovieSchema.
		var NewUserSchema = new mongoose.Schema({
		  username: {
		    type: String,
		    index: true, 
		    unique: true,
		    required: true
		  },
		  email: {
		    type: String,       
		    required: true
		  },
		  password: {
		    type: String,
		    required: true
		  }
		});
		NewUserSchema.plugin(uniqueValidator, { message: 'Error, se espera que {PATH} sea unico.' });

		// Export the model schema.
		module.exports = NewUserSchema;

	3.- Se agrega el controllador dentro de la carpeta controlador y se agrega:

		var restful = require('node-restful');

		module.exports = function(app, route) {

		  // Setup the controller for REST.
		  var rest = restful.model(
		    'newuser',
		    app.models.newuser
		  ).methods(['get','post']);

		  // Register this endpoint with the application.
		  rest.register(app, route);

		  // Return middleware.
		  return function(req, res, next) {
		    next();
		  };
		};

		Nota: los metodos que se admiten en HTTP para un servicio restful son: POST, GET, PUT, DELETE. 

	4.- Se agrega el nombre del modelo a la ruta principal de los modelos del sistema de la ruta en el archivo routes.js del directorio raiz del sistema:
		'/newuser': require('./controllers/NewUserController')

	5.- Finalmente se inicializa el servidor y se accede a traves del navegador a la dirección http://localhost:3000/newuser

#########################################################################
##################### Enrutar los datos del CLiente #####################

Configuración del cliente para enlazar a los datos del servidor.
	1.- Primero ejecutamos desde la terminal ubicados en el directorio raiz del cliente de la aplicación:
		$ yo angular:route nombredelmodelo

		Nota: Este creara todos los archivos necesarios dentro del controlador y la vista de la capa del cliente (Como leyeron crea la VISTA de la aplicación y el CONTROLADOR automaticamente XD, pero solo los archivos vacios ':(' ).

	2.- Luego hacemos referencia a la vista desde nuestra pagina principal a partir de la etiqueta: ng-href="#/newuser" en cualquier parte que se requiere el llamado de la vista.